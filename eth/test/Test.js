// Generated by CoffeeScript 2.3.2
(function() {
  var BetokenFund, BigNumber, DAI, EXIT_FEE, FUND, KN, KRO, MiniMeToken, MiniMeTokenFactory, OMG_PRICE, PRECISION, ST, TK, TestCompound, TestKyberNetwork, TestToken, TestTokenFactory, ZERO_ADDR, bnToString, epsilon, epsilon_equal;

  BetokenFund = artifacts.require("BetokenFund");

  MiniMeToken = artifacts.require("MiniMeToken");

  MiniMeTokenFactory = artifacts.require("MiniMeTokenFactory");

  TestKyberNetwork = artifacts.require("TestKyberNetwork");

  TestToken = artifacts.require("TestToken");

  TestTokenFactory = artifacts.require("TestTokenFactory");

  TestCompound = artifacts.require("TestCompound");

  BigNumber = require("bignumber.js");

  epsilon = 1e-6;

  ZERO_ADDR = "0x0000000000000000000000000000000000000000";

  PRECISION = 1e18;

  bnToString = function(bn) {
    return BigNumber(bn).toFixed(0);
  };

  PRECISION = 1e18;

  OMG_PRICE = 1000 * PRECISION;

  EXIT_FEE = 0.03;

  FUND = async function(cycle, phase, account) {
    var fund, i, j, k, l, m, ref, ref1;
    fund = (await BetokenFund.deployed());
    if (cycle - 1 > 0) {
      for (i = k = 1, ref = cycle - 1; (1 <= ref ? k <= ref : k >= ref); i = 1 <= ref ? ++k : --k) {
        for (j = l = 0; l <= 1; j = ++l) {
          await fund.nextPhase({
            from: account
          });
        }
      }
    }
    if (phase >= 0) {
      for (i = m = 0, ref1 = phase; (0 <= ref1 ? m <= ref1 : m >= ref1); i = 0 <= ref1 ? ++m : --m) {
        await fund.nextPhase({
          from: account
        });
      }
    }
    return fund;
  };

  DAI = async function(fund) {
    var daiAddr;
    daiAddr = (await fund.DAI_ADDR.call());
    return TestToken.at(daiAddr);
  };

  KN = async function(fund) {
    var kyberAddr;
    kyberAddr = (await fund.KYBER_ADDR.call());
    return TestKyberNetwork.at(kyberAddr);
  };

  TK = async function(symbol) {
    var addr, factory;
    factory = (await TestTokenFactory.deployed());
    addr = (await factory.getToken.call(symbol));
    return TestToken.at(addr);
  };

  ST = async function(fund) {
    var shareTokenAddr;
    shareTokenAddr = (await fund.shareTokenAddr.call());
    return MiniMeToken.at(shareTokenAddr);
  };

  KRO = async function(fund) {
    var kroAddr;
    kroAddr = (await fund.KRO_ADDR.call());
    return MiniMeToken.at(kroAddr);
  };

  epsilon_equal = function(curr, prev) {
    return curr.minus(prev).div(prev).abs().lt(epsilon);
  };

  contract("first_cycle", function(accounts) {
    var account, owner;
    owner = accounts[0];
    account = accounts[1];
    it("start_cycle", async function() {
      var cycleNumber, cyclePhase;
      this.fund = (await FUND(1, -1, owner));
      // start cycle
      await this.fund.nextPhase({
        from: owner
      });
      // check phase
      cyclePhase = +((await this.fund.cyclePhase.call()));
      assert.equal(cyclePhase, 0, "cycle phase didn't change after cycle start");
      // check cycle number
      cycleNumber = +((await this.fund.cycleNumber.call()));
      return assert.equal(cycleNumber, 1, "cycle number didn't change after cycle start");
    });
    it("deposit_dai", async function() {
      var account2, amount, dai, daiBlnce, fundBalance, newFundBalance, prevDAIBlnce, prevShareBlnce, shareBlnce, st;
      dai = (await DAI(this.fund));
      st = (await ST(this.fund));
      account2 = accounts[2];
      // give DAI to user
      amount = 1 * PRECISION;
      await dai.mint(account2, bnToString(amount), {
        from: owner
      });
      // deposit DAI
      fundBalance = BigNumber((await this.fund.totalFundsInDAI.call()));
      prevDAIBlnce = BigNumber((await dai.balanceOf.call(account2)));
      prevShareBlnce = BigNumber((await st.balanceOf.call(account2)));
      await dai.approve(this.fund.address, bnToString(amount), {
        from: account2
      });
      await this.fund.depositDAI(bnToString(amount), {
        from: account2
      });
      await dai.approve(this.fund.address, 0, {
        from: account2
      });
      // check fund balance
      newFundBalance = BigNumber((await this.fund.totalFundsInDAI.call()));
      assert.equal(newFundBalance.minus(fundBalance).toNumber(), amount, "fund balance increase incorrect");
      // check dai balance
      daiBlnce = BigNumber((await dai.balanceOf.call(account2)));
      assert.equal(prevDAIBlnce.minus(daiBlnce).toNumber(), amount, "DAI balance decrease incorrect");
      // check shares
      shareBlnce = BigNumber((await st.balanceOf.call(account2)));
      return assert.equal(shareBlnce.minus(prevShareBlnce).toNumber(), amount, "received share amount incorrect");
    });
    it("deposit_token", async function() {
      var amount, fundBalance, newFundBalance, prevShareBlnce, prevTokenBlnce, shareBlnce, st, token, tokenBlnce;
      token = (await TK("OMG"));
      st = (await ST(this.fund));
      // mint token for user
      amount = 1000 * PRECISION;
      await token.mint(account, bnToString(amount), {
        from: owner
      });
      // deposit token
      fundBalance = BigNumber((await this.fund.totalFundsInDAI.call()));
      prevTokenBlnce = BigNumber((await token.balanceOf.call(account)));
      prevShareBlnce = BigNumber((await st.balanceOf.call(account)));
      await token.approve(this.fund.address, bnToString(amount), {
        from: account
      });
      await this.fund.depositToken(token.address, bnToString(amount), {
        from: account
      });
      await token.approve(this.fund.address, 0, {
        from: account
      });
      // check shares
      shareBlnce = BigNumber((await st.balanceOf.call(account)));
      assert.equal(shareBlnce.minus(prevShareBlnce).toNumber(), Math.round(amount * OMG_PRICE / PRECISION), "received share amount incorrect");
      // check fund balance
      newFundBalance = BigNumber((await this.fund.totalFundsInDAI.call()));
      assert.equal(newFundBalance.minus(fundBalance).toNumber(), Math.round(amount * OMG_PRICE / PRECISION), "fund balance increase incorrect");
      // check token balance
      tokenBlnce = BigNumber((await token.balanceOf.call(account)));
      return assert.equal(prevTokenBlnce.minus(tokenBlnce).toNumber(), amount, "token balance decrease incorrect");
    });
    it("withdraw_dai", async function() {
      var amount, dai, daiBlnce, fundBlnce, prevDAIBlnce, prevFundBlnce, prevShareBlnce, shareBlnce, st;
      dai = (await DAI(this.fund));
      st = (await ST(this.fund));
      // withdraw dai
      amount = 0.1 * PRECISION;
      prevShareBlnce = BigNumber((await st.balanceOf.call(account)));
      prevFundBlnce = BigNumber((await this.fund.totalFundsInDAI.call()));
      prevDAIBlnce = BigNumber((await dai.balanceOf.call(account)));
      await this.fund.withdrawDAI(bnToString(amount), {
        from: account
      });
      // check shares
      shareBlnce = BigNumber((await st.balanceOf.call(account)));
      assert.equal(prevShareBlnce.minus(shareBlnce).toNumber(), amount, "burnt share amount incorrect");
      // check fund balance
      fundBlnce = BigNumber((await this.fund.totalFundsInDAI.call()));
      assert.equal(prevFundBlnce.minus(fundBlnce).toNumber(), amount, "fund balance decrease incorrect");
      // check dai balance
      daiBlnce = BigNumber((await dai.balanceOf.call(account)));
      return assert.equal(daiBlnce.minus(prevDAIBlnce).toNumber(), amount * (1 - EXIT_FEE), "DAI balance increase incorrect");
    });
    it("withdraw_token", async function() {
      var amount, fundBlnce, prevFundBlnce, prevShareBlnce, prevTokenBlnce, shareBlnce, st, token, tokenBlnce;
      token = (await TK("OMG"));
      st = (await ST(this.fund));
      // withdraw token
      amount = 1 * PRECISION;
      prevShareBlnce = BigNumber((await st.balanceOf.call(account)));
      prevFundBlnce = BigNumber((await this.fund.totalFundsInDAI.call()));
      prevTokenBlnce = BigNumber((await token.balanceOf.call(account)));
      await this.fund.withdrawToken(token.address, bnToString(amount), {
        from: account
      });
      // check shares
      shareBlnce = BigNumber((await st.balanceOf.call(account)));
      assert.equal(prevShareBlnce.minus(shareBlnce).toNumber(), amount, "burnt share amount incorrect");
      // check fund balance
      fundBlnce = BigNumber((await this.fund.totalFundsInDAI.call()));
      assert.equal(prevFundBlnce.minus(fundBlnce).toNumber(), amount, "fund balance decrease incorrect");
      // check token balance
      tokenBlnce = BigNumber((await token.balanceOf.call(account)));
      return assert.equal(tokenBlnce.minus(prevTokenBlnce).toNumber(), Math.round(amount * (1 - EXIT_FEE) * PRECISION / OMG_PRICE), "DAI balance increase incorrect");
    });
    it("phase_0_to_1", async function() {
      return (await this.fund.nextPhase({
        from: owner
      }));
    });
    it("buy_token_and_sell", async function() {
      var MAX_PRICE, amount, fund, fundDAIBlnce, fundTokenBlnce, kro, kroBlnce, kroTotalSupply, prevFundTokenBlnce, prevKROBlnce, token, tokenAmount;
      kro = (await KRO(this.fund));
      token = (await TK("OMG"));
      fund = this.fund;
      MAX_PRICE = bnToString(OMG_PRICE * 2);
      prevKROBlnce = BigNumber((await kro.balanceOf.call(account)));
      prevFundTokenBlnce = BigNumber((await token.balanceOf(this.fund.address)));
      // buy token
      amount = 100 * PRECISION;
      await this.fund.createInvestment(token.address, bnToString(amount), 0, MAX_PRICE, {
        from: account,
        gasPrice: 0
      });
      // check KRO balance
      kroBlnce = BigNumber((await kro.balanceOf.call(account)));
      assert.equal(prevKROBlnce.minus(kroBlnce).toNumber(), amount, "Kairo balance decrease incorrect");
      // check fund token balance
      fundDAIBlnce = BigNumber((await this.fund.totalFundsInDAI.call()));
      kroTotalSupply = BigNumber((await kro.totalSupply.call()));
      fundTokenBlnce = BigNumber((await token.balanceOf(fund.address)));
      assert.equal(fundTokenBlnce.minus(prevFundTokenBlnce).toNumber(), Math.floor(fundDAIBlnce.times(PRECISION).div(kroTotalSupply).times(amount).div(OMG_PRICE).toNumber()), "token balance increase incorrect");
      // sell token
      tokenAmount = BigNumber(((await this.fund.userInvestments.call(account, 0))).tokenAmount);
      await this.fund.sellInvestmentAsset(0, bnToString(tokenAmount), 0, MAX_PRICE, {
        from: account,
        gasPrice: 0
      });
      // check KRO balance
      kroBlnce = BigNumber((await kro.balanceOf.call(account)));
      assert(epsilon_equal(kroBlnce, prevKROBlnce), "Kairo balance changed");
      // check fund token balance
      fundTokenBlnce = BigNumber((await token.balanceOf(this.fund.address)));
      return assert.equal(fundTokenBlnce.toNumber(), prevFundTokenBlnce.toNumber(), "fund token balance changed");
    });
    it("next_cycle", async function() {
      return (await this.fund.nextPhase({
        from: owner
      }));
    });
    it("redeem_commission", async function() {
      var dai, daiBlnce, prevDAIBlnce;
      dai = (await DAI(this.fund));
      prevDAIBlnce = BigNumber((await dai.balanceOf.call(account)));
      // redeem commission
      await this.fund.redeemCommission({
        from: account
      });
      // check DAI balance
      daiBlnce = BigNumber((await dai.balanceOf.call(account)));
      return assert(daiBlnce.minus(prevDAIBlnce).toNumber() > 0, "didn't receive commission");
    });
    // TODO: actually check the amount
    it("redeem_commission_in_shares", async function() {
      var account2, prevShareBlnce, shareBlnce, st;
      st = (await ST(this.fund));
      account2 = accounts[2];
      prevShareBlnce = BigNumber((await st.balanceOf.call(account2)));
      // redeem commission
      await this.fund.redeemCommissionInShares({
        from: account2
      });
      // check Share balance
      shareBlnce = BigNumber((await st.balanceOf.call(account2)));
      return assert(shareBlnce.minus(prevShareBlnce).toNumber() > 0, "didn't receive commission");
    });
    // TODO: actually check the amount
    return it("next_cycle", async function() {
      return (await this.fund.nextPhase({
        from: owner
      }));
    });
  });

  contract("price_changes", function(accounts) {
    var account, owner;
    owner = accounts[0];
    account = accounts[1];
    it("prep_work", async function() {
      var amount, dai;
      this.fund = (await FUND(1, 0, owner)); // Starts in Deposit & Withdraw phase
      dai = (await DAI(this.fund));
      amount = 10 * PRECISION;
      await dai.mint(account, amount, {
        from: owner // Mint DAI
      });
      await dai.approve(this.fund.address, bnToString(amount), {
        from: account // Approve transfer
      });
      await this.fund.depositToken(dai.address, bnToString(amount), {
        from: account // Deposit for account
      });
      return (await this.fund.nextPhase({
        from: owner // Go to Decision Making phase
      }));
    });
    it("raise_asset_price", async function() {
      var delta, investmentId, kn, kro, kroBlnce, newPrice, omg, prevKROBlnce, stake;
      kn = (await KN(this.fund));
      kro = (await KRO(this.fund));
      omg = (await TK("OMG"));
      // reset asset price
      await kn.setTokenPrice(omg.address, OMG_PRICE, {
        from: owner
      });
      // invest in asset
      prevKROBlnce = BigNumber((await kro.balanceOf.call(account)));
      stake = 0.1 * PRECISION;
      investmentId = 0;
      await this.fund.createInvestment(omg.address, bnToString(stake, {
        from: account
      }));
      // raise asset price
      delta = 0.2;
      newPrice = OMG_PRICE * (1 + delta);
      await kn.setTokenPrice(omg.address, bnToString(newPrice, {
        from: owner
      }));
      // sell asset
      await this.fund.sellInvestmentAsset(investmentId, {
        from: account
      });
      // check KRO reward
      kroBlnce = BigNumber((await kro.balanceOf.call(account)));
      return assert(epsilon_equal(kroBlnce.minus(prevKROBlnce).div(stake), delta), "KRO reward incorrect");
    });
    it("lower_asset_price", async function() {
      var delta, investmentId, kn, kro, kroBlnce, newPrice, omg, prevKROBlnce, stake;
      kn = (await KN(this.fund));
      kro = (await KRO(this.fund));
      omg = (await TK("OMG"));
      // reset asset price
      await kn.setTokenPrice(omg.address, bnToString(OMG_PRICE), {
        from: owner
      });
      // invest in asset
      prevKROBlnce = BigNumber((await kro.balanceOf.call(account)));
      stake = 0.1 * PRECISION;
      investmentId = 1;
      await this.fund.createInvestment(omg.address, bnToString(stake, {
        from: account
      }));
      // lower asset price
      delta = -0.2;
      newPrice = OMG_PRICE * (1 + delta);
      await kn.setTokenPrice(omg.address, bnToString(newPrice, {
        from: owner
      }));
      // sell asset
      await this.fund.sellInvestmentAsset(investmentId, {
        from: account
      });
      // check KRO penalty
      kroBlnce = BigNumber((await kro.balanceOf.call(account)));
      return assert(epsilon_equal(kroBlnce.minus(prevKROBlnce).div(stake), delta), "KRO penalty incorrect");
    });
    return it("lower_asset_price_to_0", async function() {
      var delta, investmentId, kn, kro, kroBlnce, newPrice, omg, prevKROBlnce, stake;
      kn = (await KN(this.fund));
      kro = (await KRO(this.fund));
      omg = (await TK("OMG"));
      // reset asset price
      await kn.setTokenPrice(omg.address, bnToString(OMG_PRICE), {
        from: owner
      });
      // invest in asset
      prevKROBlnce = BigNumber((await kro.balanceOf.call(account)));
      stake = 0.1 * PRECISION;
      investmentId = 2;
      await this.fund.createInvestment(omg.address, bnToString(stake, {
        from: account
      }));
      // lower asset price
      delta = -0.999;
      newPrice = OMG_PRICE * (1 + delta);
      await kn.setTokenPrice(omg.address, bnToString(newPrice, {
        from: owner
      }));
      // sell asset
      await this.fund.sellInvestmentAsset(investmentId, {
        from: account
      });
      // check KRO penalty
      kroBlnce = BigNumber((await kro.balanceOf.call(account)));
      return assert(epsilon_equal(kroBlnce.minus(prevKROBlnce).div(stake), delta), "KRO penalty incorrect");
    });
  });

  contract("param_setters", function(accounts) {
    var owner;
    owner = accounts[0];
    it("prep_work", async function() {
      return this.fund = (await FUND(1, 0, owner)); // Starts in Deposit & Withdraw phase
    });
    it("decrease_only_proportion_setters", async function() {
      var devFeeRate, exitFeeRate;
      // changeDeveloperFeeRate()
      devFeeRate = (await this.fund.developerFeeRate.call());
      // valid
      await this.fund.changeDeveloperFeeRate(devFeeRate.dividedToIntegerBy(2), {
        from: owner
      });
      assert.equal(((await this.fund.developerFeeRate.call())).toNumber(), devFeeRate.dividedToIntegerBy(2).toNumber(), "changeDeveloperFeeRate() faulty");
      try {
        // invalid -- >= 1
        await this.fund.changeDeveloperFeeRate(BigNumber(PRECISION), {
          from: owner
        });
        assert.fail("changeDeveloperFeeRate() accepted >=1 rate");
      } catch (error) {}
      try {
        // invalid -- larger than current value
        await this.fund.changeDeveloperFeeRate(devFeeRate, {
          from: owner
        });
        assert.fail("changeDeveloperFeeRate() accepted >= current rate");
      } catch (error) {}
      // changeExitFeeRate()
      exitFeeRate = (await this.fund.exitFeeRate.call());
      // valid
      await this.fund.changeExitFeeRate(exitFeeRate.dividedToIntegerBy(2), {
        from: owner
      });
      assert.equal(((await this.fund.exitFeeRate.call())).toNumber(), exitFeeRate.dividedToIntegerBy(2).toNumber(), "changeExitFeeRate() faulty");
      try {
        // invalid -- >= 1
        await this.fund.changeExitFeeRate(BigNumber(PRECISION), {
          from: owner
        });
        assert.fail("changeExitFeeRate() accepted >=1 rate");
      } catch (error) {}
      try {
        // invalid -- larger than current value
        await this.fund.changeExitFeeRate(exitFeeRate, {
          from: owner
        });
        return assert.fail("changeExitFeeRate() accepted >= current rate");
      } catch (error) {}
    });
    return it("address_setters", async function() {
      var kro, newAddr, zeroAddr;
      newAddr = "0xdd974d5c2e2928dea5f71b9825b8b646686bd200";
      zeroAddr = "0x0";
      kro = (await KRO(this.fund));
      // changeDeveloperFeeAccount()
      // valid address
      await this.fund.changeDeveloperFeeAccount(newAddr, {
        from: owner
      });
      assert.equal((await this.fund.developerFeeAccount.call()), newAddr, "changeDeveloperFeeAccount() faulty");
      try {
        // invalid address
        await this.fund.changeDeveloperFeeAccount(zeroAddr, {
          from: owner
        });
        return assert.fail("changeDeveloperFeeAccount() accepted zero address");
      } catch (error) {}
    });
  });

}).call(this);
