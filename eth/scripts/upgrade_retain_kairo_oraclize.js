// Generated by CoffeeScript 2.2.0
(function() {
  var BetokenFund, ControlToken, OraclizeHandler, config, dev_fee_address, old_address;

  BetokenFund = artifacts.require("BetokenFund");

  ControlToken = artifacts.require("ControlToken");

  OraclizeHandler = artifacts.require("OraclizeHandler");

  config = require("../deployment_configs/testnet.json");

  dev_fee_address = "0xDbE011EB3fe8C77C94Cc9d9EC176BDddC937F425";

  old_address = "0x01cde8d0fc1188850852d7828de263953bb438f8";

  module.exports = function(callback) {
    var new_contract, old_contract;
    old_contract = BetokenFund.at(old_address);
    new_contract = null;
    return old_contract.pause().then(function() {
      //Deploy new BetokenFund
      return BetokenFund.new(config.etherDeltaAddress, dev_fee_address, config.precision, config.timeOfChangeMaking, config.timeOfProposalMaking, config.timeOfWaiting, config.timeOfSellOrderWaiting, config.minStakeProportion, config.maxProposals, config.commissionRate, config.orderExpirationTimeInBlocks, config.developerFeeProportion, config.maxProposalsPerMember).then(function(_instance) { //Ethdelta address //developerFeeAccount //precision //2 * 24 * 3600, #timeOfChangeMaking //2 * 24 * 3600, #timeOfProposalMaking //timeOfWaiting //timeOfSellOrderWaiting //minStakeProportion //maxProposals //commissionRate //3600 / 20, #orderExpirationTimeInBlocks //developerFeeProportion //maxProposalsPerMember
        new_contract = _instance;
        return console.log("Created new BetokenFund at " + _instance.address);
      });
    }).then(function() {
      var kairoAddr, oraclizeAddr, participants;
      //Transfer participants data
      participants = [];
      oraclizeAddr = null;
      kairoAddr = null;
      old_contract.participantsCount().then(function(_count) {
        var count, getAllItems, getItem, id;
        count = _count.toNumber();
        if (count === 0) {
          return;
        }
        participants = new Array(count);
        getItem = function(id) {
          return old_contract.participants(id).then(function(_item) {
            return new Promise(function(fullfill, reject) {
              if (typeof _item !== null) {
                participants[id] = _item;
                fullfill();
              } else {
                reject();
              }
            });
          });
        };
        getAllItems = (function() {
          var i, ref, results;
          results = [];
          for (id = i = 0, ref = count - 1; undefined !== 0 && (0 <= ref ? 0 <= i && i <= ref : 0 >= i && i >= ref); id = 0 <= ref ? ++i : --i) {
            results.push(getItem(id));
          }
          return results;
        })();
        return Promise.all(getAllItems);
      }).then(function() {
        new_contract.initializeParticipants(participants);
        return console.log("Initializing participant list...");
      //Initialize subcontracts for new BetokenFund
      }).then(function() {
        return old_contract.controlTokenAddr();
      }).then(function(_addr) {
        return kairoAddr = _addr;
      }).then(function() {
        return old_contract.oraclizeAddr();
      }).then(function(_addr) {
        return oraclizeAddr = _addr;
      }).then(function() {
        return new_contract.initializeSubcontracts(kairoAddr, oraclizeAddr);
      });
      //Transfer ownership
      old_contract.changeOraclizeOwner(new_contract.address);
      return old_contract.changeControlTokenOwner(new_contract.address);
    });
  };

}).call(this);

//# sourceMappingURL=upgrade_retain_kairo_oraclize.js.map
